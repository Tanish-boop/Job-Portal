// controllers/authController.js
import pool from '../config/db.js';
import bcrypt from 'bcrypt';
const saltRounds = 10;

// --- Middlewares for Route Protection ---

export const isAuthenticated = (req, res, next) => {
    if (req.session.user) {
        return next();
    }
    req.flash('error', 'Please log in to access this page.');
    res.redirect('/login');
};

export const isRecruiter = (req, res, next) => {
    if (req.session.user && req.session.user.role === 'recruiter') {
        return next();
    }
    req.flash('error', 'Access denied. Recruiter privileges required.');
    res.redirect('/');
};

export const isSeeker = (req, res, next) => {
    if (req.session.user && req.session.user.role === 'seeker') {
        return next();
    }
    req.flash('error', 'Access denied. Job Seeker privileges required.');
    res.redirect('/');
};

// --- Controller Functions (Register/Login/Logout) ---

export const getRegister = (req, res) => {
    res.render('register.ejs', { pageTitle: 'Register' });
};

export const registerUser = async (req, res) => {
    const { name, email, password, role } = req.body;
    try {
        const hashedPassword = await bcrypt.hash(password, saltRounds);
        await pool.query(
            'INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)',
            [name, email, hashedPassword, role]
        );
        req.flash('success', `Registration successful! Please log in as a ${role}.`);
        res.redirect('/login');
    } catch (error) {
        let message = 'An error occurred during registration.';
        if (error.code === 'ER_DUP_ENTRY') message = 'Email already in use.';
        req.flash('error', message);
        res.redirect('/register');
    }
};

export const getLogin = (req, res) => {
    res.render('login.ejs', { pageTitle: 'Login' });
};

export const loginUser = async (req, res) => {
    const { email, password } = req.body;
    try {
        const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        const user = rows[0];

        if (!user || !(await bcrypt.compare(password, user.password))) {
            req.flash('error', 'Invalid email or password.');
            return res.redirect('/login');
        }
        
        req.session.user = { userId: user.userId, name: user.name, email: user.email, role: user.role };
        req.flash('success', `Welcome back, ${user.name}!`);

        const redirectUrl = user.role === 'recruiter' ? '/recruiter/dashboard' : '/';
        res.redirect(redirectUrl);

    } catch (error) {
        console.error('Login error:', error);
        req.flash('error', 'An error occurred during login.');
        res.redirect('/login');
    }
};

export const logoutUser = (req, res) => {
    req.session.destroy(err => {
        if (err) {
            console.error(err);
        }
        res.redirect('/');
    });
};